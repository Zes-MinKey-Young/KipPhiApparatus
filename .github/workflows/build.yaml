name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: get_version
        run: |
          # 获取最新的 tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          # 移除 'v' 前缀
          VERSION=LATEST_TAG
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"
          echo "Version: $VERSION"

  build-server:
    needs: prepare
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: windows-x64
            platform: windows
          - os: ubuntu-latest
            target: linux-x64
            platform: linux
          - os: ubuntu-latest
            target: linux-arm64
            platform: linux
          - os: macos-latest
            target: darwin-x64
            platform: macos
          - os: macos-latest
            target: darwin-arm64
            platform: macos

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        working-directory: ./server
        shell: bash
        run: |
          if [ -f "package.json" ]; then
            echo "Installing npm dependencies"
            bun install
          else
            echo "No package.json found, skipping dependency installation"
          fi

      - name: Build server binary
        working-directory: ./server
        shell: bash
        run: |
          echo "Building with Bun for target: ${{ matrix.target }}"
          bun build index.ts --compile --target bun-${{ matrix.target }} --outfile kpa-server-${{ matrix.target }}

      - name: Upload server binary
        uses: actions/upload-artifact@v4
        with:
          name: server-${{ matrix.target }}
          path: server/kpa-server-${{ matrix.target }}${{ matrix.platform == 'windows' && '.exe' || '' }}
          # artifact名字，不是文件名字，踩坑

  build-windows-installer-and-compression:
    needs: [prepare, build-server]
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download Windows server binary
        uses: actions/download-artifact@v4
        with:
          name: server-windows-x64
          path: server

      - name: Set version in ISS file
        run: |
          # 读取版本号
          $version = "${{ needs.prepare.outputs.version }}"
          
          # 替换 ISS 文件中的版本信息
          $issContent = Get-Content install.iss -Raw
          $issContent = $issContent -replace "AppVersion=.*", "AppVersion=$version"
          $issContent = $issContent -replace "OutputBaseFilename=.*", "OutputBaseFilename=KPA_Setup_v$version"
          # 这个是正则转义，不是字符串转义，后面不需要双反斜杠
          
          # 保存修改后的文件
          Set-Content install.iss $issContent
          
          # 显示修改后的内容
          Write-Host "Updated ISS file:"
          Get-Content install.iss

      - name: Setup Inno Setup
        run: |
          choco install innosetup -y
          

      - name: Download Chinese Simplified Translation for Inno Setup
        run: |
          # 下载简体中文翻译包
          curl -L https://raw.githubusercontent.com/kira-96/Inno-Setup-Chinese-Simplified-Translation/master/ChineseSimplified.isl -o ChineseSimplified.isl
          
          # 将翻译文件复制到 Inno Setup 语言目录
          $innoPath = "C:\Program Files (x86)\Inno Setup 6"
          if (Test-Path $innoPath) {
            $languagesPath = Join-Path $innoPath "Languages"
            if (Test-Path $languagesPath) {
              Copy-Item ChineseSimplified.isl -Destination $languagesPath
              Write-Host "Chinese Simplified translation installed to $languagesPath"
            }
          }
          

      - name: Build Windows installer
        run: |
          dir server\
          # 确保 server 文件有执行权限
          if (Test-Path "server\kpa-server-windows-x64") {
            echo "Path exists"
            Copy-Item "server\kpa-server-windows-x64" -Destination "server\server.exe" -PassThru
          }
          
          # 编译安装包
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" /Odist install.iss

      - name: Check if installer was created
        run: |
          Get-ChildItem -Path dist -Force
          if (Test-Path "dist\*.exe") {
            Write-Host "Installer created successfully"
          } else {
            Write-Error "Installer not found"
            exit 1
          }

      - name: Create portable ZIP archive
        run: |
          # 创建便携式 ZIP 包，包含 ISS 文件中指定的内容
          New-Item -ItemType Directory -Path "kpa-portable" -Force
          
          # 复制 ISS 文件中定义的文件和目录
          if (Test-Path "dist") {
            Copy-Item -Path "dist\*" -Destination "kpa-portable\dist" -Recurse -Force
          }
          if (Test-Path "html") {
            Copy-Item -Path "html\*" -Destination "kpa-portable\html" -Recurse -Force
          }
          if (Test-Path "sound") {
            Copy-Item -Path "sound\*" -Destination "kpa-portable\sound" -Recurse -Force
          }
          if (Test-Path "img") {
            Copy-Item -Path "img\*" -Destination "kpa-portable\img" -Recurse -Force
          }
          if (Test-Path "css") {
            Copy-Item -Path "css\*" -Destination "kpa-portable\css" -Recurse -Force
          }
          if (Test-Path "server\default.jsonc") {
            Copy-Item -Path "server\default.jsonc" -Destination "kpa-portable\server\config.jsonc" -Force
          }
          if (Test-Path "LICENSE") {
            Copy-Item -Path "LICENSE" -Destination "kpa-portable\LICENSE" -Force
          }
          if (Test-Path "start.bat") {
            Copy-Item -Path "start.bat" -Destination "kpa-portable\start.bat" -Force
          }
          
          # 创建 ZIP 压缩包
          Compress-Archive -Path "kpa-portable\*" -DestinationPath "kpa-portable-windows-x64.zip" -Force

      - name: Upload Windows installer
        uses: actions/upload-artifact@v4
        with:
          name: kpa-windows-installer
          path: dist/*.exe
          
      - name: Upload portable ZIP
        uses: actions/upload-artifact@v4
        with:
          name: kpa-portable-windows-x64
          path: kpa-portable-windows-x64.zip

  release:
    needs: [prepare, build-server, build-windows-installer-and-compression]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List artifacts
        run: |
          find ./artifacts -type f

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ needs.prepare.outputs.version }}
          tag_name: v${{ needs.prepare.outputs.version }}
          draft: false
          prerelease: ${{ contains(needs.prepare.outputs.version, '-') }}
          files: |
            ./artifacts/server-windows-x64/kpa-server-windows-x64
            ./artifacts/server-linux-x64/kpa-server-linux-x64
            ./artifacts/server-darwin-x64/kpa-server-darwin-x64
            ./artifacts/server-darwin-arm64/kpa-server-darwin-arm64
            ./artifacts/kpa-windows-installer/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}